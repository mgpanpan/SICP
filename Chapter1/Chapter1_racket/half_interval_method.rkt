#lang racket
(define (search f neg_point pos_point)
  (let ((midpoint (average neg_point pos_point)))
    (if (close_enough? neg_point pos_point)
        midpoint
        (let ((test_value (f midpoint)))
          (cond ((positive? test_value)
                 (search f neg_point midpoint))
                ((negative? test_value)
                 (search f midpoint pos_point))
                (else midpoint))))))
(define (average x y)
  (/ (+ x y) 2))
(define (close_enough? neg_point pos_point)
  (< (abs (- neg_point pos_point)) 0.001))
(define (half_interval_method f a b)
  (let ((a_value (f a))
        (b_value (f b)))
    (cond ((and (negative? a_value) (positive? b_value))
           (search f a b))
          ((and (negative? b_value) (positive? a_value))
           (search f b a))
          (else
           (error "Value are not of opposite sign" a b)))))
(half_interval_method sin 2.0 4.0)
(half_interval_method (lambda (x) (- (* x x x) (* 2 x) 3)) 
                      1.0 2.0)
