;; Exercise 3.22

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (cond ((empty-queue?)
             (error "FRONT on empty queue"))
            (else
             (car front-ptr))))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue"))
            (else
             (set-front-ptr! (cdr front-ptr)))))
    (define (print-queue)
      (define (iter front rear)
        (cond ((eq? front rear)
               (display (car front)))
              (else
               (display (car front))
               (display "-")
               (iter (cdr front) rear))))
      (if (empty-queue?)
          (display "Empty queue")
          (iter front-ptr rear-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'print-queue) print-queue)
            (else
             (error "Unknown request"))))
    dispatch))
(define q1 (make-queue))
((q1 'print-queue))
((q1 'front-queue))
((q1 'insert-queue!) 'a)
((q1 'print-queue))
((q1 'insert-queue!) 'b)
((q1 'print-queue))
((q1 'insert-queue!) '123)
((q1 'print-queue))
((q1 'insert-queue!) '0980)
((q1 'print-queue))
((q1 'insert-queue!) 'cdefg)
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'insert-queue!) 'hijkl)
((q1 'front-queue))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))
((q1 'delete-queue!))
((q1 'print-queue))

